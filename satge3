import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { BarChart, Bar, XAxis, YAxis, Tooltip, PieChart, Pie, Cell, ResponsiveContainer } from "recharts";

const categories = ["Food", "Transport", "Entertainment", "Rent", "Utilities", "Other"];
const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#A28BFE", "#FF6384"];

export default function FinanceTracker() {
  const [transactions, setTransactions] = useState([]);
  const [amount, setAmount] = useState("");
  const [description, setDescription] = useState("");
  const [date, setDate] = useState("");
  const [category, setCategory] = useState(categories[0]);
  const [budgets, setBudgets] = useState({});

  const addTransaction = () => {
    if (!amount || !description || !date || !category) return;
    const newTransaction = { amount: parseFloat(amount), description, date, category };
    setTransactions([...transactions, newTransaction]);
    setAmount("");
    setDescription("");
    setDate("");
    setCategory(categories[0]);
  };

  const deleteTransaction = (index) => {
    setTransactions(transactions.filter((_, i) => i !== index));
  };

  const setBudget = (category, budget) => {
    setBudgets({ ...budgets, [category]: parseFloat(budget) || 0 });
  };

  const monthlyData = transactions.reduce((acc, transaction) => {
    const month = new Date(transaction.date).toLocaleString("default", { month: "short" });
    acc[month] = (acc[month] || 0) + transaction.amount;
    return acc;
  }, {});

  const categoryData = transactions.reduce((acc, transaction) => {
    acc[transaction.category] = (acc[transaction.category] || 0) + transaction.amount;
    return acc;
  }, {});

  const budgetComparisonData = Object.keys(categoryData).map((category) => ({
    category,
    spent: categoryData[category],
    budget: budgets[category] || 0,
  }));

  return (
    <div className="p-4 max-w-xl mx-auto">
      <Card>
        <CardContent>
          <h2 className="text-xl font-bold mb-2">Add Transaction</h2>
          <Input placeholder="Amount" value={amount} onChange={(e) => setAmount(e.target.value)} type="number" className="mb-2" />
          <Input placeholder="Description" value={description} onChange={(e) => setDescription(e.target.value)} className="mb-2" />
          <Input placeholder="Date" value={date} onChange={(e) => setDate(e.target.value)} type="date" className="mb-2" />
          <select value={category} onChange={(e) => setCategory(e.target.value)} className="mb-2 p-2 border rounded">
            {categories.map((cat) => (
              <option key={cat} value={cat}>{cat}</option>
            ))}
          </select>
          <Button onClick={addTransaction}>Add</Button>
        </CardContent>
      </Card>
      <h2 className="text-xl font-bold mt-4">Set Budgets</h2>
      {categories.map((cat) => (
        <div key={cat} className="flex justify-between items-center mb-2">
          <span>{cat}</span>
          <Input
            type="number"
            placeholder="Set Budget"
            value={budgets[cat] || ""}
            onChange={(e) => setBudget(cat, e.target.value)}
            className="w-24"
          />
        </div>
      ))}
      <h2 className="text-xl font-bold mt-4">Budget vs Actual</h2>
      <ResponsiveContainer width="100%" height={300}>
        <BarChart data={budgetComparisonData}>
          <XAxis dataKey="category" />
          <YAxis />
          <Tooltip />
          <Bar dataKey="spent" fill="#FF8042" name="Spent" />
          <Bar dataKey="budget" fill="#00C49F" name="Budget" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
}
